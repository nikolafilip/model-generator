"""
Module for exporting 3D models to STL files.
"""
import os
import subprocess
import platform
from typing import Optional
from datetime import datetime

from solid import scad_render_to_file

from src.config.constants import DEFAULT_EXPORT_DIRECTORY, DEFAULT_FILENAME
from src.logic.model_builder import ModelError


class ExportError(Exception):
    """Exception raised for errors in the file export process."""

    pass


class FileExporter:
    """
    Class for exporting 3D models to STL files.
    """
    
    def __init__(self, filepath: str):
        """
        Initialize the FileExporter.
        
        Args:
            filepath: Path to save the output files (without extension).
        """
        self.filepath = filepath

    @staticmethod
    def open_scad_file(scad_filepath: str) -> None:
        """
        Open a SCAD file with the OpenSCAD application.
        
        This is useful when command-line conversion fails, especially on macOS.
        
        Args:
            scad_filepath: Path to the OpenSCAD file to open.
            
        Raises:
            ExportError: If the OpenSCAD application cannot be found or launched.
        """
        try:
            is_macos = platform.system() == "Darwin"
            
            if is_macos:
                # On macOS, use direct path to the application
                openscad_app_path = "/Applications/OpenSCAD-2021.01.app"
                
                if os.path.exists(openscad_app_path):
                    # Use direct path which is more reliable
                    cmd = ["open", openscad_app_path, "--args", scad_filepath]
                else:
                    # Try a more generic approach if specific version not found
                    # This lists all applications that start with "OpenSCAD"
                    apps = [app for app in os.listdir("/Applications") 
                           if app.startswith("OpenSCAD") and app.endswith(".app")]
                    
                    if apps:
                        # Use the first one found
                        cmd = ["open", f"/Applications/{apps[0]}", "--args", scad_filepath]
                    else:
                        raise ExportError("OpenSCAD application not found in /Applications")
            else:
                # On Linux/Windows, try with the command
                cmd = ["openscad", scad_filepath]
            
            process = subprocess.Popen(cmd)
            
            print(f"Opened {scad_filepath} with OpenSCAD. Please export it manually as STL.")
            print(f"Save the STL file to the same location with the same base name.")
            
            # Display instructions for manual export
            print("\nTo export from OpenSCAD:")
            print("1. Wait for OpenSCAD to open the file")
            print("2. Go to File > Export > Export as STL")
            print(f"3. Save to: {os.path.splitext(scad_filepath)[0]}.stl")
            
        except Exception as e:
            print(f"Error opening OpenSCAD: {str(e)}")
            print(f"Please open OpenSCAD manually and use File > Open to open:")
            print(f"{os.path.abspath(scad_filepath)}")
            
            raise ExportError(
                f"Could not open OpenSCAD: {str(e)}\n\n"
                "Please open OpenSCAD manually and use File > Open to open the SCAD file:\n"
                f"{os.path.abspath(scad_filepath)}"
            )

    def generate_model(self, model) -> str:
        """
        Generate a SCAD file from a model.
        
        Args:
            model: The solid-python model object.
            
        Returns:
            Path to the generated SCAD file.
        """
        try:
            # Create the directory if it doesn't exist
            os.makedirs(os.path.dirname(self.filepath), exist_ok=True)
            
            # Generate the SCAD file
            scad_path = f"{self.filepath}.scad"
            scad_render_to_file(
                model, 
                scad_path, 
                file_header=f"// Generated by 3D Divider Generator\n// Date: {datetime.now()}\n\n",
                include_orig_code=False
            )
            
            return scad_path
        except Exception as e:
            raise ExportError(f"Failed to generate SCAD file: {str(e)}") from e
            
    def export_model(self, scad_filepath: str) -> str:
        """
        Export a SCAD file to STL.
        
        Args:
            scad_filepath: Path to the OpenSCAD file.
            
        Returns:
            Path to the generated STL file.
        """
        try:
            # Try automated export first
            stl_filepath = os.path.splitext(scad_filepath)[0] + ".stl"
            return self.scad_to_stl(scad_filepath, stl_filepath)
        except Exception as e:
            raise ExportError(f"Error exporting model: {str(e)}")

    @staticmethod
    def scad_to_stl(
        scad_filepath: str, stl_filepath: Optional[str] = None
    ) -> str:
        """
        Convert an OpenSCAD file to STL using the OpenSCAD command-line interface.

        Args:
            scad_filepath: Path to the OpenSCAD file.
            stl_filepath: Path to save the STL file. If None, derived from the SCAD path.

        Returns:
            Path to the generated STL file.

        Raises:
            ExportError: If the OpenSCAD command fails or the STL file cannot be created.
        """
        try:
            # If no STL filepath specified, derive from SCAD filename
            if stl_filepath is None:
                base_path = os.path.splitext(scad_filepath)[0]
                stl_filepath = f"{base_path}.stl"

            # Ensure the directory exists
            os.makedirs(os.path.dirname(os.path.abspath(stl_filepath)), exist_ok=True)

            # Check if we're on macOS
            is_macos = platform.system() == "Darwin"
            
            if is_macos:
                # Try specific path for macOS first
                openscad_path = "/Applications/OpenSCAD-2021.01.app/Contents/MacOS/OpenSCAD"
                if not os.path.exists(openscad_path):
                    # Try to find other versions
                    app_dir = "/Applications"
                    for app in os.listdir(app_dir):
                        if app.startswith("OpenSCAD"):
                            openscad_path = f"{app_dir}/{app}/Contents/MacOS/OpenSCAD"
                            if os.path.exists(openscad_path):
                                break
            else:
                # Use command name on other platforms
                openscad_path = "openscad"

            # Run OpenSCAD to convert the file
            cmd = [openscad_path, "-o", stl_filepath, scad_filepath]
            
            try:
                result = subprocess.run(
                    cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, timeout=60
                )
                
                # Check for errors
                if result.returncode != 0:
                    if is_macos:
                        error_msg = (
                            f"OpenSCAD export failed: {result.stderr or result.stdout}\n\n"
                            "On macOS, you might need to:\n"
                            "1. Install OpenSCAD using 'brew install --cask openscad'\n"
                            "2. Install Rosetta 2 with 'softwareupdate --install-rosetta --agree-to-license'\n"
                            "3. Open OpenSCAD manually once to accept any initial setup"
                        )
                    else:
                        error_msg = f"OpenSCAD export failed: {result.stderr or result.stdout}"
                    raise ExportError(error_msg)
                
            except subprocess.TimeoutExpired:
                # If the command times out, it might be waiting for GUI interaction
                if is_macos:
                    raise ExportError(
                        "OpenSCAD command timed out. On macOS, you need to:\n"
                        "1. Open the OpenSCAD application manually first\n"
                        "2. Accept any initial setup or permissions\n"
                        "3. Try exporting again\n\n"
                        "Alternatively, you can open the SCAD file and export manually:\n"
                        f"1. Open this file with OpenSCAD: {scad_filepath}\n"
                        f"2. Use File > Export > Export as STL to save to: {stl_filepath}"
                    )
                else:
                    raise ExportError("OpenSCAD command timed out")

            # Verify the STL file was created
            if not os.path.exists(stl_filepath):
                # Try to create a simple STL file as a fallback
                with open(stl_filepath, 'w') as f:
                    f.write("solid OpenSCAD_Model\nendsolid OpenSCAD_Model\n")
                
                if is_macos:
                    raise ExportError(
                        f"STL file was not created at {stl_filepath}. "
                        "A placeholder STL file has been created instead.\n\n"
                        "On macOS, the OpenSCAD command-line interface may not work properly. "
                        "Try opening the SCAD file manually:\n"
                        f"1. Open this file with OpenSCAD: {scad_filepath}\n"
                        f"2. Use File > Export > Export as STL to save to: {stl_filepath}"
                    )
                else:
                    raise ExportError(f"STL file was not created at {stl_filepath}")

            return stl_filepath

        except subprocess.SubprocessError as e:
            if platform.system() == "Darwin":
                raise ExportError(
                    f"Error running OpenSCAD: {str(e)}\n\n"
                    "On macOS, you might need to:\n"
                    "1. Install OpenSCAD using 'brew install --cask openscad'\n"
                    "2. Install Rosetta 2 with 'softwareupdate --install-rosetta --agree-to-license'\n"
                    "3. Try exporting manually by opening the generated SCAD file with OpenSCAD"
                )
            else:
                raise ExportError(f"Error running OpenSCAD: {str(e)}")
        except Exception as e:
            raise ExportError(f"Error exporting to STL: {str(e)}")

    @staticmethod
    def ensure_export_directory(directory: Optional[str] = None) -> str:
        """
        Ensure that the export directory exists.

        Args:
            directory: Directory to ensure exists. If None, uses the default directory.

        Returns:
            Path to the export directory.

        Raises:
            ExportError: If the directory cannot be created.
        """
        try:
            # Use default if not specified
            if directory is None:
                script_dir = os.path.dirname(os.path.abspath(__file__))
                project_root = os.path.abspath(
                    os.path.join(script_dir, "..", "..")
                )
                directory = os.path.join(project_root, DEFAULT_EXPORT_DIRECTORY)

            # Create the directory if it doesn't exist
            os.makedirs(directory, exist_ok=True)
            return directory

        except Exception as e:
            raise ExportError(f"Error creating export directory: {str(e)}")
